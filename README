<h1 align="center">🤖 AutoUI Tester</h1>

<p align="center">
  🧠 <b>Intelligent Web UI & Performance Testing Framework</b><br>
  <i>Created by Dawid Cierbikowski</i>
</p>

<p align="center">
  <img src="https://img.shields.io/badge/Playwright-Automation-green?logo=playwright&logoColor=white">
  <img src="https://img.shields.io/badge/TypeScript-Framework-blue?logo=typescript&logoColor=white">
  <img src="https://img.shields.io/badge/Accessibility-Checker-purple?logo=accessibility&logoColor=white">
  <img src="https://img.shields.io/badge/Reports-HTML%20%2F%20JSON-orange">
</p>

---

### 🧩 Overview

**AutoUI Tester** is a modular Playwright-based framework for  
🌐 *automatic exploration*, ⚡ *performance auditing*, ♿ *accessibility scanning*, and 🧾 *report generation*  
— all without writing a single test script.

It can crawl entire websites, collect metrics, analyze accessibility, and generate a full **HTML report** with screenshots and logs.

---

## 🚀 Features

### 🔍 **Smart Explorer**
`BasePage` automatically navigates and analyzes pages:
- 🌐 Discovers internal links up to configurable depth  
- 🏷️ Collects titles, URLs, and HTTP statuses  
- 📸 Captures screenshots for every page  
- ❗ Detects console errors and failed requests  

---

### ⚡ **Performance Analysis**
Powered by `PerformanceService`, it measures:
| Metric | Description | Rating |
|:--|:--|:--|
| ⏱️ **Load Time** | Total time until full page load | 🟢 Fast / 🟡 Medium / 🔴 Slow |
| 🧩 **DOMContentLoaded** | Time to DOM readiness | 🟢 / 🟡 / 🔴 |
| ⚙️ **TTFB** | Time To First Byte | 🟢 / 🟡 / 🔴 |

Each metric includes emoji-based **speed indicators** for quick review.

---

### ♿ **Accessibility Auditing**
`AccessibilityService` integrates with [axe-core/playwright](https://github.com/dequelabs/axe-core-npm):
- ✅ Validates **WCAG 2.1 compliance**
- ⚠️ Detects **missing alt tags**, **contrast issues**, **ARIA violations**
- 📊 Returns structured accessibility issue data per page  

---

### 🧠 **AI-like Smart Exploration (Experimental)**
The `SmartExplorerService` uses heuristic patterns to:
- 🔑 Identify “Login”, “Contact”, or “Product” pages  
- 🧭 Simulate user navigation paths  
- 🚫 Avoid redundant or external links intelligently  

---

### 🧾 **Reports**
`Reporter` generates clean, visual summaries:
- 📑 **HTML report** → `reports/report.html`  
- 🧱 **JSON logs** → `reports/logs.json`  
- Includes screenshots, performance data, console logs & accessibility results  

---

## 🧩 How It Works

> The framework is fully modular — each service handles a distinct responsibility.

| Component | Description |
|:--|:--|
| 🧭 **BasePage** | Orchestrates crawling and service integration |
| 🔎 **MonitoringService** | Captures console errors & failed requests |
| ⚡ **PerformanceService** | Measures load, DOM, and TTFB metrics |
| ♿ **AccessibilityService** | Runs axe-core audits for accessibility |
| 🧠 **SmartExplorerService** | Adds heuristic AI-based navigation |
| 🧾 **Reporter** | Generates HTML and JSON reports |
| 🧹 **ReportHelper** | Manages cleaning and saving reports |

---

## 🧱 Extend the Framework

You can easily extend AutoUI Tester with:

- 🧩 **Visual Regression Testing** – compare screenshots across runs  
- 🔍 **SEO Audits** – extract meta tags, headings & link stats  
- 🔒 **Security Checks** – look for mixed content or unsafe cookies  
- 🔔 **CI/CD Integration** – export results to Slack, GitHub, or Jenkins  

---

## 🧠 Future Roadmap

- 🤖 AI-driven form filling and input simulation  
- 📱 Responsive & multi-device mode testing  
- 📈 Trend analytics with historical comparison  
- 💡 Lighthouse performance integration  
- 🧭 Smart navigation learning and prioritization  

---

## ⚙️ Installation

```bash
git clone https://github.com/yourusername/autoui-tester.git
cd autoui-tester
npm install
npx playwright install
````

---

## ▶️ Run the Tool

Run the automated test:

```bash
npm run start
```

or via `ts-node`:

```bash
npx ts-node tests/main.ts
```

The tool will:

1. Clear previous reports
2. Launch Playwright
3. Crawl your target site
4. Collect metrics and accessibility data
5. Generate `report.html` and `logs.json`

---



---

## 📄 License

**MIT © 2025** — Created by [Dawid Cierbikowski](https://github.com/yourusername
